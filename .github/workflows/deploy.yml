name: Global Infrastructure and Deployment

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
  push:
    branches: ["dev", "main"]
    paths:
      - "infra/**"
      - "services/**"
      - ".github/workflows/**"
  repository_dispatch:
    types: ["deploy-service"]

jobs:
  # GLOBAL INFRASTRUCTURE & DEPLOYMENT JOB
  infra-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'repository_dispatch' }}

    env:
      AWS_REGION: us-east-1
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}

    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_TERRAFORM }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.4

      - name: Initialize Terraform
        run: |
          cd infra/terraform
          terraform init -input=false

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve

      - name: Fetch ECR Repositories
        id: ecr
        run: |
          cd infra/terraform
          terraform output -json ecr_repositories 2>/dev/null | awk '/^{/{print $0}' > ecr.json
        #   cat ecr.json

      - name: Update Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name insightric-cluster

      - name: Apply AWS Auth ConfigMap
        env:
          NODE_ROLE_ARN: ${{ secrets.AWS_ROLE_TO_ASSUME_TERRAFORM }}
          GHA_ROLE_ARN: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        run: |
          echo "Creating/updating aws-auth ConfigMap..."
          cat <<EOF > aws-auth.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: aws-auth
            namespace: kube-system
          data:
            mapRoles: |
              - rolearn: $NODE_ROLE_ARN
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                  - system:bootstrappers
                  - system:nodes
              - rolearn: $GHA_ROLE_ARN
                username: github-actions
                groups:
                  - system:masters
          EOF

          kubectl apply -f aws-auth.yaml

  # LIGHTWEIGHT REDEPLOY JOB
  deploy-service:
    name: Deploying ${{ github.event.client_payload.display_name || github.event.client_payload.name || github.event.client_payload.service }}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'repository_dispatch' }}

    env:
      AWS_REGION: us-east-1
      NAMESPACE: default
      IMAGE: ${{ github.event.client_payload.image }}
      SERVICE: ${{ github.event.client_payload.service }}
      REF: ${{ github.event.client_payload.ref || 'dev' }}

    steps:
      - name: Checkout Repository (branch from dispatcher)
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ env.REF }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Kubeconfig for EKS
        run: aws eks update-kubeconfig --region $AWS_REGION --name insightric-cluster

      - name: Create ECR Pull Secret
        run: |
          ECR_REGISTRY=136086620476.dkr.ecr.us-east-1.amazonaws.com
          kubectl create secret docker-registry ecr-pull-secret \
            --docker-server=$ECR_REGISTRY \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region $AWS_REGION) \
            --namespace $NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy or Update Kubernetes Resources
        run: |
          kubectl apply -f infra/kubernetes/deployments/$SERVICE.yaml --namespace $NAMESPACE
          kubectl apply -f infra/kubernetes/services/$SERVICE.yaml --namespace $NAMESPACE

      - name: Patch Deployments to use Pull Secret
        run: |
          kubectl patch -f infra/kubernetes/deployments/$SERVICE.yaml -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"ecr-pull-secret"}]}}}}' --namespace $NAMESPACE

      - name: Update Kubernetes Deployment Image
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "Updating $SERVICE with image $IMAGE"
          kubectl set image deployment/$SERVICE \
              $SERVICE=$IMAGE --namespace $NAMESPACE

      - name: Wait for Deployment Rollout
        run: |
          kubectl rollout status deployment/$SERVICE --namespace $NAMESPACE --timeout=300s

      - name: Debug pods
        run: |
          kubectl get nodes -o wide
          kubectl get pods -n default -o wide
          kubectl describe pods -n default
          for pod in $(kubectl get pods -n default -o name); do
            echo "Logs for $pod:"
            kubectl logs -n default "$pod" || true
          done
